# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Chat {
  createdAt: DateTime!
  id: Int!
  messages: [Message!]!
  metadata: String!
  modelId: String!
  provider: String!
  title: String!
  type: String!
  userId: Int!
}

type ContentItem {
  content: String
  id: String
  input: String
  name: String
  text: String
  type: ContentItemType!
}

input ContentItemInput {
  content: String
  id: String
  input: String
  name: String
  text: String
  type: ContentItemType!
}

enum ContentItemType {
  TEXT
  TOOL_RESULT
  TOOL_USE
}

input CreateMemberInput {
  hasHistoryEnabled: Boolean! = true
  name: String!
  systemPrompt: String!
  tools: [String!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetUserInput {
  userPermalink: String!
}

type Member {
  createdAt: DateTime!
  hasHistoryEnabled: Boolean!
  id: ID!
  name: String!
  systemPrompt: String!
  tools: [String!]!
}

type Message {
  chatId: Int!
  content: [ContentItem!]!
  id: Int!
  role: String!
  timestamp: DateTime!
}

type Model {
  modelId: String!
  modelName: String!
  provider: String!
}

type Mutation {
  createChat(prompt: String!): Chat!
  createMember(input: CreateMemberInput!): Member!
  getUploadSignature: UploadSignatureType!
  logout: Boolean!
  removeChat(id: Int!): Boolean!
  sendMessage(chatId: Int!, content: ContentItemInput!, role: String!): Boolean!
  signIn(email: String!, password: String!): User!
  signUp(email: String!, name: String!, password: String!): User!
  toggleMemberHistory(enabled: Boolean!, id: String!): Member!
  updateMemberSystemPrompt(id: String!, systemPrompt: String!): Member!
  updateMemberTools(id: String!, tools: [String!]!): Member!
  updateUser(input: UpdateUserInput!): User!
}

type Query {
  availableAgents: String!
  chat(id: Int!): Chat!
  chats: [Chat!]!
  getAvatarUrl(id: String!): String!
  getGoogleAuthURL: String!
  getModels: [Model!]!
  githubAuth(input: SocialAuthInput!): User!
  googleAuth(input: SocialAuthInput!): User!
  me: User
  member(id: String!): Member!
  members: [Member!]!
  user(input: GetUserInput!): User
  users: [User!]!
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

input SocialAuthInput {
  code: String!
}

type Subscription {
  chatCreated: Chat!
  messageCreated(chatId: Int!, limit: Int!): Message!
}

input UpdateUserInput {
  bio: String
  email: String
  name: String
}

type UploadSignatureType {
  apiKey: String!
  cloudName: String!
  signature: String!
  timestamp: Int!
}

type User {
  active: Boolean!
  avatar: String
  bio: String
  createdAt: DateTime!
  email: String
  githubId: String
  googleId: String
  id: Int!
  name: String!
  permalink: String!
  role: Role!
}